

    target: automatic generate service impl class

    implement step:
        1. analyze serviceImpl structure
            1.0 @SERVICE_FULL_NAME@ =getBasicPackageName + ".application" + classname + "Service"
            1.1 @PACKAGE_NAME@ = getBasicPackageName + ".application" + ".impl"
            1.2 @CLASS_DATA_FULL_NAME@ = getBasicPackageName + ".application.data." + moduleName + className+ "Data"
            1.3 @CLASS_FORM_FULL_NAME@ = getBasicPackageName + ".application.query." + moduleName + className+ "Form"
            1.4 @CLASS_FULL_NAME@ = hbm.name
            1.5 @REPOSITORY_CLASS_FULL_NAME@ = getBasicPackageName + ".persistence.jpa." + moduleName + className + "Repository"
            1.6 @IMPORT_TYPE@
                1.6.1 可能存在的类型BigDecimal
                1.6.2 由ManyToOne所产生的类型
                1.6.2 由ManyToOne所产生的Repository
            1.7 @CLASS_NAME@ = classname
            1.8 @PROPERTY@ = 由ManyToOne所产生的类型 + "Repository" 首字母小写的(typeRepository) 加上注解@Autowired的
            //动态的，数量不固定
            1.9 @MANY_TO_ONE_REPOSITORY_QUERY@
                1.9.1 List<@MANY_TYPE@> Low(MANY_TYPE)= checkData(form.get@MANY_TYPE@Id(), low(MANY_TYPE)Repository);
            2.0 @REPOSITORY_SAVE_OPERATOR@
                2.0.1 return @classname@Repository.save(new @CLASS_NAME@(form, @MANY_TYPE@.get(0))).id();
            2.1 @ORM_UPDATE_OPERATOR@
            List<%MANY_TYPE%> Low(MANY_TYPE)= checkData(form.get@MANY_TYPE@Id(), low(@many_type@)Repository);
                    @classname@.update(form, @low(many_type)@.get(0) ... ... 动态);
            2.2 @MANY_TO_ONE_SERVICE_IMPL_METHOD@ 怎么处理
                2.2.1
                    动态的，数量不固定
                    public List<@CLASSNAME@> find@CLASSNAME@ListBy@MANY_TYPE@Id(long @many_type@Id) {
                            List<@CLASSNAME@Data> @classname@List = @classname@Repository.findAll((r, q, cb) -> {
                                Predicate p = cb.and(cb.equal(r.get("@many_type@").get("id"), @many_type@Id), cb.equal(r.get("deleted"),false));
                                q.where(p);
                                q.orderBy(cb.desc(r.get("id")));
                                return q.getRestriction();
                            });

                            if (@classname@List == null) {
                                throw new CodeDefinedException(ExceptionCode.EX_NOT_FOUND_ERROR);
                            }


                            return @classname@List.stream().map(p -> new @CLASS_NAME@Data(p)).collect(Collectors.toList());
                        }

                2.2.2
                     @Override
                        public PageData<@CLASSNAME@Data> find@CLASSNAME@PageBy@MANY_TYPE@Id(long @many_type@Id, Pageable pageable) {
                            Page<@CLASSNAME@> @CLASSNAME@Page = @classname@Repository.findAll((r, q, cb) -> {
                                Predicate p = cb.and(cb.equal(r.get("@many_type@").get("id"), @many_type@Id), cb.equal(r.get("deleted"),false));
                                q.where(p);
                                q.orderBy(cb.desc(r.get("id")));
                                return q.getRestriction();
                            }, pageable);


                            if (@classname@Page == null) {
                                throw new CodeDefinedException(ExceptionCode.EX_NOT_FOUND_ERROR);
                            }

                            return new PageData(@classname@Page.map(p -> new @CLASSNAME@Data(p)));
                        }
        2. analyze import args
            2.1 outputDir
            2.2 templateFile
            2.3 hbm
        3. write build.xml
        4. write java class